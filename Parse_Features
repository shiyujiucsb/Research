#include <algorithm>
#include <fstream>
#include <iomanip>
#include <iostream>
#include <sstream>
#include <stdio.h>
#include <stdlib.h>
#include <string>
#include <vector>

using namespace std;

string toString(double value) {
  stringstream ss;
  ss << setprecision(numeric_limits<double>::digits10 + 1);
  ss << value;
  string s = ss.str();
  if (s.length() == 1) {
    s.append(".0");
  }
  return s;
}
void encode_threshold_list(string original_content,
                          vector<double> sorted_thresholds) {
  ofstream encoded_thresholds("encoded_thresholds.txt");
  for (int i = 0; i < sorted_thresholds.size(); i++) {
    string s = toString(sorted_thresholds[i]);
    size_t pos = original_content.find(s);
    original_content.replace(pos, s.length(), to_string(i));
  }
  encoded_thresholds << original_content;
}

vector<double> parse_threshold(string content, string original_content) {
  string delimiter1 = "<threshold>";
  string delimiter2 = "</threshold>";
  size_t pos = 0;
  size_t pos1 = 0;
  size_t pos2 = 0;
  vector<double> threshold_list;
  string token;

  while ((pos = content.find(delimiter1)) != std::string::npos) {
    pos1 = content.find(delimiter1);
    pos2 = content.find(delimiter2);
    size_t length = pos2 - pos1;
    token = content.substr(pos1 + delimiter1.length(),
                           length - delimiter1.length());
    content.erase(0, pos2 + delimiter2.length());
    threshold_list.push_back(atof(token.c_str()));
  }

  sort(threshold_list.begin(), threshold_list.end());
  return threshold_list;
}

bool contains_digits_colon_period(const std::string &str) {
  return str.find_first_not_of("0123456789:.") == std::string::npos;
}

bool all_digits(const std::string &str) {
  return str.find_first_not_of("0123456789") == std::string::npos;
}

int main() {
  string xml_data;
  string xml_file_name;
  cout<<"Enter xml file name"<<endl;
  cin>>xml_file_name;

  ifstream xmlFile (xml_file_name);
  ifstream xmlFile("file3.txt");
  string file_content((std::istreambuf_iterator<char>(xmlFile)),
                      (std::istreambuf_iterator<char>()));
  string original_file_content = file_content;

  vector<double> sorted_threshold_list =
      parse_threshold(file_content, original_file_content);
  encode_threshold_list(original_file_content, sorted_threshold_list);
  cout << "printing threshold_list" << endl;
  for (int i = 0; i < sorted_threshold_list.size(); i++) {
    cout << sorted_threshold_list[i] << " ";
  }
  cout << endl;

  // encode thresholds
  vector<int> encoded_threshold_list;
  for (int i = 0; i < sorted_threshold_list.size(); i++) {
    encoded_threshold_list.push_back(i);
  }

  string feature_data;
  string feature_file_name;
  // cout<<"Enter feature file name"<<endl;
  // cin>>feature_file_name;

  ifstream infile("file1.txt");
  ofstream encoded_features("encoded_features.txt");
  string line;
  vector<string> token_vec;
  vector<string> all_tokens;
  string delimiter1 = " ";
  string delimiter2 = ":";

  size_t pos = 0;
  size_t token_pos = 0;
  // get a line from the file
  for (std::string line; getline(infile, line);) {
    // parse the line by spaces first
    while ((pos = line.find(delimiter1)) != std::string::npos) {
      // if its a valid feauture add to token_vec
      string token = line.substr(0, pos);
      all_tokens.push_back(token);
      if ((contains_digits_colon_period(token)) && !(all_digits(token))) {
        token_vec.push_back(token);
        // cout << token << endl;
      }
      line.erase(0, pos + delimiter1.length());
    }
    // strip tokens of their feature number and colon for encoding
    size_t count = 0;
    for (string token : token_vec) {
      token_pos = token.find(delimiter2);
      token.erase(0, token_pos + delimiter2.length());
      int i = 0;
      cout<<"sorted_threshold_list[i] = "<<sorted_threshold_list[i]<<endl;
      while (stod(token) > sorted_threshold_list[i+1]) {
        cout<<"i is"<<i<<endl;
        i += 1;
      }
      cout<<"replacing with encoded value "<<i<<endl;
      string str = to_string(i);
      token_vec[count].replace(token_pos + delimiter2.length(), string::npos,
                               str);
      cout<<"done replacing with encoded value"<<endl;
    count+=1;
    }


    for (int c = 2; c < token_vec.size() + 2; c++) {
      all_tokens[c] = token_vec[c - 2];
    }

    for (string token : all_tokens)
      encoded_features << token << " ";
    encoded_features << endl;
    all_tokens.clear();
    token_vec.clear();
  }
  return 0;
}
